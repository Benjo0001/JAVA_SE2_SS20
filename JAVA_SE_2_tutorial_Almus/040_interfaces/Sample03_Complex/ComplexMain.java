/**
 * Entry point class for the this interface demo.
 */
public class ComplexMain {

    public static void main(String[] args) {
        
        // Again: Try to answer all the questions BEFORE you compile and run the code.
        // Otherwise you would spoil all the fun. :)

        // And again:
        // How would you visualize the relationship model these objects have?

        // First: Some easy ones:
        // Which of the following statements work or do not work? (Why?)
        ////ComplexClass complex = new ComplexClass();
        ////ComplexClassBase complex = new ComplexClass();
        ////ComplexClassBase complex = new ComplexClassBase();
        ////IComplexInterface complex = new ComplexClassBase();
        ////IOtherInterface complex = new ComplexClass();
        
        // Now:
        // What output is generated by the following code?
        // ...and after that...
        // What changes, if you modify ComplexClass like it suggests you to do? (And why?)
        IComplexInterface complex1 = new ComplexClass();
        complex1.DoSomething();
        complex1.DoSomethingElse();
        System.out.println("Instance call: " + complex1.InterfaceGreeting);
        System.out.println("Static call: " + IComplexInterface.InterfaceGreeting);
        ((IOtherInterface)complex1).PrintSomethingOther();
        ((ComplexClassBase)complex1).PrintMyClassName();
    }
}